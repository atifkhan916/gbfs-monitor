# This workflow handles the testing and deployment process for a CDK application
# It supports both development and production environments
name: GBFS Deployment

# Define the events that trigger this workflow
on:
  pull_request:
    types: [closed]
    branches: [dev]  # Trigger on closed PRs to dev branch
  workflow_dispatch:  # Allow manual triggers
    inputs:
      environment:
        description: 'Environment to deploy to (dev/prod)'
        required: true
        default: 'dev'

# Define environment variables
env:
  DEV_AWS_REGION: 'us-east-1'  # Replace with your dev AWS region
  PROD_AWS_REGION: 'us-east-1' # Replace with your prod AWS region

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Check out the repository code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up Node.js environment
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20.x'

    # Step 3: Install project dependencies
    - name: Install dependencies
      run: npm ci

    # Step 4: Build TypeScript code
    - name: Build TypeScript
      run: npm run build

    # Step 5: Run test suite
    # This step will fail the workflow if any tests fail
    #- name: Run tests
    #  run: npm test

    # Step 6: Determine the deployment environment
    # Sets DEPLOY_ENV based on the trigger and branch
    - name: Set environment
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.merged }}" == "true" && "${{ github.base_ref }}" == "dev" ]]; then
          echo "DEPLOY_ENV=DEV" >> $GITHUB_ENV
          echo "AWS_REGION=${{ env.DEV_AWS_REGION }}" >> $GITHUB_ENV
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          if [[ "${{ github.event.inputs.environment }}" == "prod" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "DEPLOY_ENV=PROD" >> $GITHUB_ENV
            echo "AWS_REGION=${{ env.PROD_AWS_REGION }}" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.environment }}" == "dev" ]]; then
            echo "DEPLOY_ENV=DEV" >> $GITHUB_ENV
            echo "AWS_REGION=${{ env.DEV_AWS_REGION }}" >> $GITHUB_ENV
          else
            echo "Invalid environment for the current branch"
            exit 1
          fi
        else
          echo "No deployment will be performed."
          exit 1
        fi

    # Step 7: Configure AWS credentials
    # Uses environment-specific credentials stored in GitHub secrets
    - name: Configure AWS credentials
      if: env.DEPLOY_ENV == 'DEV' || env.DEPLOY_ENV == 'PROD'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets[format('GBFS_{0}_AWS_ACCESS_KEY_ID', env.DEPLOY_ENV)] }}
        aws-secret-access-key: ${{ secrets[format('GBFS_{0}_AWS_SECRET_KEY', env.DEPLOY_ENV)] }}
        aws-region: ${{ env.AWS_REGION }}

    # Step 8: Deploy the IAC stack
    # Only runs if all previous steps were successful and DEPLOY_ENV is set
    # Includes a manual confirmation step for production deployments
    - name: Deploy
      if: success() && (env.DEPLOY_ENV == 'DEV' || env.DEPLOY_ENV == 'PROD')
      run: |
        if [[ "${{ env.DEPLOY_ENV }}" == "PROD" ]]; then
          echo "Deploying to production environment. Please confirm this action."
          read -p "Type 'yes' to continue: " confirmation
          if [ "$confirmation" != "yes" ]; then
            echo "Production deployment cancelled."
            exit 1
          fi
        fi
        npx cdk deploy --context environment=${{ env.DEPLOY_ENV }}  --context aws_region=${{ env.AWS_REGION }} --require-approval never
      shell: bash
  
    