name: GBFS Deployment

on:
  pull_request:
    types: [closed]
    branches: [dev]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (dev/prod)'
        required: true
        default: 'dev'

env:
  TF_DIR: './terraform'

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20.x'

    - name: Install dependencies
      run: npm ci

    - name: Build TypeScript
      run: npm run build

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.5.7'

    # New step to read tfvars
    - name: Read Environment Variables
      id: tfvars
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.merged }}" == "true" && "${{ github.base_ref }}" == "dev" ]]; then
          ENV="dev"
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          ENV="${{ github.event.inputs.environment }}"
        else
          echo "No deployment will be performed."
          exit 1
        fi
        
        echo "DEPLOY_ENV=${ENV^^}" >> $GITHUB_ENV
        
        # Read aws_region from tfvars
        AWS_REGION=$(grep 'aws_region' "$TF_DIR/environments/${ENV}.tfvars" | cut -d'=' -f2 | tr -d ' "')
        echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV
        
        echo "Environment variables set:"
        echo "DEPLOY_ENV: ${ENV^^}"
        echo "AWS_REGION: $AWS_REGION"

    - name: Configure AWS credentials
      if: env.DEPLOY_ENV == 'DEV' || env.DEPLOY_ENV == 'PROD'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets[format('GBFS_{0}_AWS_ACCESS_KEY_ID', env.DEPLOY_ENV)] }}
        aws-secret-access-key: ${{ secrets[format('GBFS_{0}_AWS_SECRET_KEY', env.DEPLOY_ENV)] }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform Backend
      if: env.DEPLOY_ENV == 'DEV' || env.DEPLOY_ENV == 'PROD'
      run: |
        chmod +x ./scripts/setup_terraform_backend.sh
        ./scripts/setup_terraform_backend.sh \
          "${{ env.DEPLOY_ENV }}-gbfs-monitoring-terraform-state" \
          "${{ env.AWS_REGION }}"
      shell: bash

    - name: Deploy
      env:
        TF_VAR_environment: ${{ env.DEPLOY_ENV }}
      if: success() && (env.DEPLOY_ENV == 'DEV' || env.DEPLOY_ENV == 'PROD')
      run: |
        if [[ "${{ env.DEPLOY_ENV }}" == "PROD" ]]; then
          echo "Deploying to production environment. Please confirm this action."
          read -p "Type 'yes' to continue: " confirmation
          if [ "$confirmation" != "yes" ]; then
            echo "Production deployment cancelled."
            exit 1
          fi
        fi
        
        echo "Running Terraform commands..."
        cd "$TF_DIR" || exit

        ENV_LOWER=$(echo "${{ env.DEPLOY_ENV }}" | tr '[:upper:]' '[:lower:]')
        BUCKET_NAME="${ENV_LOWER}-gbfs-monitoring-terraform-state"
        VAR_FILE="environments/${ENV_LOWER}.tfvars"
        WORKSPACE_NAME="${ENV_LOWER}"

        echo "Using configuration:"
        echo "Workspace: ${WORKSPACE_NAME}"
        echo "Bucket: ${BUCKET_NAME}"
        echo "Var file: ${VAR_FILE}"

        echo "Initializing Terraform..."
        terraform init \
          -backend-config="bucket=${BUCKET_NAME}" \
          -backend-config="key=terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"

       echo "Selecting or creating workspace: ${WORKSPACE_NAME}"
        terraform workspace select ${WORKSPACE_NAME} || terraform workspace new ${WORKSPACE_NAME}

        echo "Validating Terraform configuration..."
        terraform validate

        echo "Generating Terraform plan..."
        terraform plan -var-file="${VAR_FILE}" -out=tfplan

        echo "Creating resources..."
        echo "Deploying to ${{ env.DEPLOY_ENV }} environment..."
        terraform apply -auto-approve tfplan

        echo "Script completed!"
      shell: bash